{{>admin/layouts/header}}
<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!--<div class="container">-->
<div class="container">
    <div class="page-inner">
        <!-- 상단 헤더 -->
        <div class="d-flex align-items-left align-items-md-center flex-column flex-md-row pt-2 pb-4">
            <div>
                <h3 class="fw-bold mb-3">대시보드</h3>
                <h6 class="op-7 mb-2">Jelly Mully의 관리자용 대시보드입니다.</h6>
            </div>
        </div>
        <!-- 상단 카드 -->
        <div class="row">
            <!-- 방문자 수 카드 -->
            <div class="col-sm-6 col-md-3">
                <div class="card card-stats card-round">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-icon">
                                <div class="icon-big text-center icon-primary bubble-shadow-small">
                                    <i class="fas fa-users"></i>
                                </div>
                            </div>
                            <div class="col col-stats ms-3 ms-sm-0">
                                <div class="numbers">
                                    <p class="card-category">방문자 수</p>
                                    <h4 class="card-title" id="visitor-count">로딩 중...</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- 제보자 수 카드 -->
            <div class="col-sm-6 col-md-3">
                <div class="card card-stats card-round">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-icon">
                                <div class="icon-big text-center icon-info bubble-shadow-small">
                                    <i class="fas fa-user-check"></i>
                                </div>
                            </div>
                            <div class="col col-stats ms-3 ms-sm-0">
                                <div class="numbers">
                                    <p class="card-category">제보자 수</p>
                                    <h4 class="card-title" id="report-count">로딩 중...</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- 경보 알림 수 카드 -->
            <div class="col-sm-6 col-md-3">
                <div class="card card-stats card-round">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-icon">
                                <div class="icon-big text-center icon-success bubble-shadow-small">
                                    <i class="fas fa-luggage-cart"></i>
                                </div>
                            </div>
                            <div class="col col-stats ms-3 ms-sm-0">
                                <div class="numbers">
                                    <p class="card-category">경보 알림 수</p>
                                    <h4 class="card-title" id="alert-count">0</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- 차트 영역 -->
        <div class="column-gap-0">
            <!-- 해파리 경보 현황 차트 (Bar Chart) -->
            <div class="col-md-10">
                <div class="card card-round">
                    <div class="card-header">
                        <div class="card-head-row">
                            <div class="card-title">해파리 경보 현황</div>
                            <div class="card-tools"></div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="chart-container" style="min-height: 375px">
                            <canvas id="statisticsChart"></canvas>
                        </div>
                        <div id="myChartLegend"></div>
                    </div>
                </div>
            </div>
            <!-- 해파리 모니터링 주간보고 요약 차트 영역 -->
            <div class="col-md-10">
                <div class="card card-round">
                    <div class="card-header">
                        <div class="card-head-row">
                            <div class="card-title">해파리 모니터링 주간보고 요약</div>
                            <div class="card-tools"></div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <!-- 제보 건 수 차트, 좌 -->
                            <div class="col-md-6">
                                <div class="chart-container" style="min-height: 375px;">
                                    <canvas id="reportsChart" height="375"></canvas>
                                </div>
                            </div>
                            <!-- 해파리 종류별 제보 비율 파이 차트, 우 -->
                            <div class="col-md-6">
                                <div class="chart-container" style="min-height: 375px;">
                                    <canvas id="jellyPieChart"></canvas>
                                </div>
                            </div>
                        </div>
                        <div id="myChartLegend"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // 서버에서 전달된 alertsJson과 reportsJson을 파싱합니다.
    const alerts = JSON.parse('{{{alertsJson}}}');
    const reports = JSON.parse('{{{reportsJson}}}');
    // const reportData = reports.content || []; // 추가

    // 오늘 기준 지난 7일의 날짜 문자열 배열 (YYYY-MM-DD)
    const now = new Date();
    const last7Days = [];
    for (let i = 6; i >= 0; i--) {
        const d = new Date();
        d.setDate(now.getDate() - i);
        const yyyy = d.getFullYear();
        const mm = String(d.getMonth() + 1).padStart(2, '0');
        const dd = String(d.getDate()).padStart(2, '0');
        last7Days.push(`${yyyy}-${mm}-${dd}`);
    }

    // 헬퍼 함수: 날짜 문자열을 ISO 형식(예:"2025-02-06T14:00:00")으로 변환하여 Date 객체 반환
    function parseDate(dateStr) {
        if (!dateStr) return new Date();
        if (dateStr.indexOf('T') !== -1) {
            return new Date(dateStr);
        }
        const parts = dateStr.split(" ");
        if (parts.length === 2) {
            if (parts[1].indexOf(":") === -1) {
                dateStr = parts[0] + "T" + parts[1] + ":00:00";
            } else {
                dateStr = parts[0] + "T" + parts[1] + ":00";
            }
        }
        return new Date(dateStr);
    }

    // ===== 해파리 경보 현황 집계 (Alerts) =====
    const uniqueBeachesAlerts = new Set(alerts.map(alert => alert.beach));
    const beachAlertCounts = {};
    uniqueBeachesAlerts.forEach(beach => {
        beachAlertCounts[beach] = 0;
    });
    alerts.forEach(alert => {
        // 경보 알림 수가 0 이하인 항목은 제외
        if (alert.appearPred <= 0) return;
        const rawDateStr = alert.createDate || alert.time;
        const parsedDate = parseDate(rawDateStr);
        if (isNaN(parsedDate.getTime())) {
            console.error('Invalid date for alert:', alert);
            return;
        }
        const alertDateStr = parsedDate.toISOString().substring(0, 10);
        if (last7Days.includes(alertDateStr)) {
            beachAlertCounts[alert.beach]++;
        }
    });
    const alertLabels = Object.keys(beachAlertCounts);
    const alertDataValues = alertLabels.map(beach => beachAlertCounts[beach]);
    const colors = ['red', 'blue', 'green', 'orange', 'purple', 'cyan', 'magenta'];
    const alertBackgroundColors = alertLabels.map((beach, index) => colors[index % colors.length]);

    // Chart.js Bar Chart for 해파리 경보 현황
    const ctxAlerts = document.getElementById('statisticsChart').getContext('2d');
    new Chart(ctxAlerts, {
        type: 'bar',
        data: {
            labels: alertLabels,
            datasets: [{
                label: '7일 간 경보 알림 수',
                data: alertDataValues,
                backgroundColor: alertBackgroundColors,
                borderColor: alertBackgroundColors,
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: { stepSize: 1 }
                }
            },
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                title: { display: true, text: '해변별 7일 총 경보 알림 수' }
            }
        }
    });

    // ===== 해파리 모니터링 주간보고 - 해변별 제보 건 수 집계 (Reports) =====
    // ReportResponse에서는 해변 이름이 'location'으로 저장됩니다.
    const uniqueBeachesReports = new Set(reports.map(report => report.location));
    const beachReportCounts = {};
    uniqueBeachesReports.forEach(location => {
        beachReportCounts[location] = 0;
    });
    reports.forEach(report => {
        const rawDateStr = report.createDate || report.time;
        const parsedDate = parseDate(rawDateStr);
        if (isNaN(parsedDate.getTime())) {
            console.error('Invalid date for report:', report);
            return;
        }
        const reportDateStr = parsedDate.toISOString().substring(0, 10);
        if (last7Days.includes(reportDateStr)) {
            beachReportCounts[report.location]++;
        }
    });
    const reportLabels = Object.keys(beachReportCounts);
    const reportDataValues = reportLabels.map(location => beachReportCounts[location]);
    const reportBackgroundColors = reportLabels.map((location, index) => colors[index % colors.length]);

    // Chart.js Bar Chart for 해변별 제보 건 수
    const ctxReports = document.getElementById('reportsChart').getContext('2d');
    new Chart(ctxReports, {
        type: 'bar',
        data: {
            labels: reportLabels,
            datasets: [{
                label: '7일 간 제보 건 수',
                data: reportDataValues,
                backgroundColor: reportBackgroundColors,
                borderColor: reportBackgroundColors,
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: { stepSize: 1 }
                }
            },
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                title: { display: true, text: '해변별 7일 총 제보 건 수' }
            }
        }
    });
    // ===== 해파리 종류별 제보 비율 집계 (Jelly Types) =====
    const jellyTypes = [
        "노무라입깃해파리", "보름달물해파리", "커튼원양해파리",
        "유령해파리", "작은상자해파리", "두빛보름달해파리",
        "기수식용해파리", "야광원양해파리", "푸른우산관해파리"
    ];
    const jellyCounts = {};
    jellyTypes.forEach(jelly => { jellyCounts[jelly] = 0; });
    reports.forEach(report => {
        const rawDateStr = report.createDate || report.time;
        const parsedDate = parseDate(rawDateStr);
        if (isNaN(parsedDate.getTime())) {
            console.error('Invalid date for report:', report);
            return;
        }
        const reportDateStr = parsedDate.toISOString().substring(0, 10);
        if (!last7Days.includes(reportDateStr)) return;
        const jelly = report.jelly;
        if (jellyCounts.hasOwnProperty(jelly)) {
            jellyCounts[jelly]++;
        }
    });
    const pieLabels = Object.keys(jellyCounts);
    const pieDataValues = pieLabels.map(jelly => jellyCounts[jelly]);
    const pieColors = ['#FF6384', '#36A2EB', '#FFCE56', '#8A2BE2', '#FF7F50', '#00FA9A', '#FFD700', '#00CED1', '#FF69B4'];

    // Chart.js Pie Chart for 해파리 종류별 제보 비율
    const ctxPie = document.getElementById('jellyPieChart').getContext('2d');
    new Chart(ctxPie, {
        type: 'pie',
        data: {
            labels: pieLabels,
            datasets: [{
                data: pieDataValues,
                backgroundColor: pieColors,
                borderColor: pieColors,
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: 'true',
                    position: 'right',
                    align: 'end',
                    labels: {
                        boxWidth: 10,
                        generateLabels: function (chart) {
                            const data = chart.data.datasets[0].data;
                            const total = data.reduce((acc, cur) => acc + cur, 0);
                            return chart.data.labels.map((label, i) => {
                                const value = data[i];
                                const percentage = total ? ((value / total) * 100).toFixed(1) : 0;
                                return {
                                    text: label + ' (' + percentage + '%)',
                                    fillStyle: chart.data.datasets[0].backgroundColor[i],
                                    strokeStyle: chart.data.datasets[0].borderColor[i],
                                    lineWidth: 1,
                                    hidden: isNaN(data[i]) || chart.getDatasetMeta(0).data[i].hidden,
                                    index: i
                                };
                            });
                        },
                        title: {display: true, text: '해파리 종류별 제보 비율 (7일간)'}
                    }
                }
            }
        }
    });
</script>

<script>
    var backend_url = "{{backend_addr}}"; // 백엔드 주소를 가져와서 사용

    function loadDashboardData() {
        // 방문자 수 가져오기
        fetch(backend_url + "/visitor/count")
                .then(response => response.json())
                .then(count => {
                    document.getElementById("visitor-count").innerText = count.toLocaleString();
                })
                .catch(error => {
                    console.error("방문자 수 조회 실패:", error);
                    document.getElementById("visitor-count").innerText = "조회 실패";
                });

        // 당일 제보 개수 가져오기
        fetch(backend_url + "/api/board/count/today")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("report-count").innerText = data.result.toLocaleString();  // ✅ result 값만 출력!
                })
                .catch(error => {
                    document.getElementById("report-count").innerText = "조회 실패";
                });

        // 당일 경보 알림 개수 가져오기
        fetch(backend_url + "/api/alert/count/today")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("alert-count").innerText = data.result.toLocaleString();
                })
                .catch(error => {
                    console.error("🚨 경보 알림 수 조회 실패:", error);
                    document.getElementById("alert-count").innerText = "조회 실패";
                });


    }

    document.addEventListener("DOMContentLoaded", loadDashboardData);
</script>



{{>admin/layouts/footer}}
